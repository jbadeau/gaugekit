package org.gaugekit.sauron.webdriver;

import org.gaugekit.sauron.Configuration;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.*;
import ru.yandex.qatools.ashot.AShot;
import ru.yandex.qatools.ashot.Screenshot;
import ru.yandex.qatools.ashot.comparison.ImageDiff;
import ru.yandex.qatools.ashot.comparison.ImageDiffer;
import ru.yandex.qatools.ashot.coordinates.Coords;
import ru.yandex.qatools.ashot.coordinates.JqueryCoordsProvider;
import ru.yandex.qatools.ashot.shooting.ShootingStrategies;

import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.codeborne.selenide.Selenide.$;

public class Sauron {

    private static final String PNG = "PNG";

    private static final String PNG_EXTENSION = ".png";

    private Configuration config;

    private WebDriver driver;

    private AShot aShot;

    private List<ImageDiff> imageDiffs;

    public Sauron(Configuration config) {
        this.config = config;
    }

    public Sauron openEye(WebDriver driver) {
        this.driver = driver;
        this.imageDiffs = new ArrayList();
        return this;
    }

    public List<ImageDiff> gaze(String name) {
        hideScollbars();
        hideCursor();
        Screenshot snapshot = new AShot()
                .shootingStrategy(ShootingStrategies.viewportPasting(100))
                .coordsProvider(new JqueryCoordsProvider())
                .takeScreenshot(driver);
        showScollbars();
        saveSnapshot(name, snapshot);
        compareToBaseline(name, snapshot);
        return imageDiffs;
    }

    public List<ImageDiff> gaze(String name, Set<By> ignores) {
        hideScollbars();
        hideCursor();
        Screenshot snapshot = new AShot()
                .shootingStrategy(ShootingStrategies.viewportPasting(100))
                .coordsProvider(new JqueryCoordsProvider())
                .ignoredElements(ignores)
                .takeScreenshot(driver);
        showScollbars();
        showElements(ignores);
        saveSnapshot(name, snapshot);
        compareToBaseline(name, snapshot);
        return imageDiffs;
    }

    public List<ImageDiff> gaze(String name, By ignore) {
        hideScollbars();
        hideCursor();
        Screenshot snapshot = new AShot()
                .shootingStrategy(ShootingStrategies.viewportPasting(100))
                .coordsProvider(new JqueryCoordsProvider())
                .addIgnoredElement(ignore)
                .takeScreenshot(driver);
        showScollbars();
        showElement(ignore);
        saveSnapshot(name, snapshot);
        compareToBaseline(name, snapshot);
        return imageDiffs;
    }

    public void closeEye() {
    }

    private void compareToBaseline(String name, Screenshot snapshot) {
        try {
            Screenshot baseline = getBaseline(name, snapshot);
            baseline.setIgnoredAreas(snapshot.getIgnoredAreas());
            baseline.setCoordsToCompare(snapshot.getCoordsToCompare());
            ImageDiff diff = new ImageDiffer().makeDiff(baseline, snapshot);
            if (diff.hasDiff()) {
                saveDiff(name, diff);
            }
            imageDiffs.add(diff);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void saveDiff(String name, ImageDiff diff) throws IOException {
        File diffFile = new File(config.getDiffDirectory(), name + PNG_EXTENSION);
        FileUtils.forceMkdirParent(diffFile);
        ImageIO.write(diff.getMarkedImage(), PNG, diffFile);
    }

    private void deleteDiff(String name, ImageDiff diff) throws IOException {
        File diffFile = new File(config.getDiffDirectory(), name + PNG_EXTENSION);
        if (diffFile.exists()) {
            diffFile.delete();
        }
    }

    private void saveSnapshot(String name, Screenshot snapshot) {
        File snapshotFile = new File(config.getSnapshotDir(), name + PNG_EXTENSION);
        try {
            FileUtils.forceMkdirParent(snapshotFile);
            ImageIO.write(snapshot.getImage(), PNG, snapshotFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Screenshot getBaseline(String name, Screenshot snapshot) throws IOException {
        File baselineFile = new File(config.getBaselineDir(), name + PNG_EXTENSION);
        if (!baselineFile.exists()) {
            FileUtils.forceMkdirParent(baselineFile);
            ImageIO.write(snapshot.getImage(), PNG, baselineFile);
        }
        return new Screenshot(ImageIO.read(baselineFile));
    }

    private void hideElements(Set<By> bys) {
        for (By by : bys) {
            hideElement(by);
        }
    }

    private void showElements(Set<By> bys) {
        for (By by : bys) {
            showElement(by);
        }
    }

    private void hideElement(By by) {
        List<WebElement> webElements = by.findElements(driver);
        for (WebElement webElement : webElements) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].style.visibility='hidden'", webElement);
        }
    }

    private void showElement(By by) {
        List<WebElement> webElements = by.findElements(driver);
        for (WebElement webElement : webElements) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].style.visibility='visible'", webElement);
        }
    }

    private void hideCursor() {
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("{ var el = document.activeElement; el && el.blur(); }");
    }

    private void hideScollbars() {
        ((JavascriptExecutor) driver).executeScript("document.body.style.overflow = 'hidden';");
    }

    private void showScollbars() {
        ((JavascriptExecutor) driver).executeScript("document.body.style.overflow = 'visible';");
    }

    public static Set<Coords> getCoords(Set<By> ignoredElements) {
        Set<Coords> ignoredCoords = new HashSet<>();
        for (By locator : ignoredElements) {
            Point point = $(locator).getLocation();
            Dimension dimension = $(locator).getSize();
            ignoredCoords.add(new Coords(point.getX(), point.getY(), dimension.getWidth(), dimension.getHeight()));
        }
        return ignoredCoords;
    }

}
